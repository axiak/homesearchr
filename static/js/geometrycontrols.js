function get$(id){return document.getElementById(id);};function GeometryControls(opt_opts){var me=this;me.Options={controlPostitionFloat:G_ANCHOR_TOP_RIGHT,controlPosition:[0,0],buttonWidth:'33',buttonHeight:'33',buttonBorder:'0',buttonCursor:'pointer',infoWindowHtmlURL:"/static/html/geometry_html_template.html",stylesheets:["/static/css/google.maps.base.css","/static/css/google.maps.ms_styles.css"],autoSave:true,cssId:"emmc-geom",debug:true};if(opt_opts){for(var o in opt_opts){me.Options[o]=opt_opts[o];}}else{}
me.isIE=navigator.appName.indexOf('Explorer')>-1;me.isChrome=navigator.userAgent.toLowerCase().indexOf('chrome')>-1;me.map=null;me.container=null;me.controls={};me.buttons_={};me.stopDigitizingFuncs_={};me.infoWindowHtmlTemplates={};me.bounds=new GLatLngBounds();me.autoSaveListener=null;me.runInitFunctions_();};GeometryControls.prototype=new GControl();GeometryControls.prototype.runInitFunctions_=function(){var me=this;me.getInfoWindowHtml_();me.addGoogleMapsCSS_();if(me.Options.autoSave){me.addAutoSaveAspect();};};GeometryControls.prototype.getDefaultPosition=function(opt_opts){var me=this,opt=me.Options,ctrlPosition;if(opt_opts){ctrlPosition=new GControlPosition(opt_opts.controlPositionFloat,new GSize(opt_opts.controlPosition[0],opt_opts.controlPosition[1]));}else{ctrlPosition=new GControlPosition(opt.controlPositionFloat,new GSize(opt.controlPosition[0],opt.controlPosition[1]));}
return ctrlPosition;};GeometryControls.prototype.initialize=function(map){var me=this;me.map=map;me.container=document.createElement("div");map.getContainer().appendChild(me.container);for(var name in me.controls){map.addControl(me.controls[name]);}
map.getInfoWindow();return me.container;};GeometryControls.prototype.createButton=function(required_opts){var me=this,opts=required_opts,Options=me.Options;if(typeof(opts.startDigitizing)&&typeof(opts.stopDigitizing)!=="function"){me.debug("Digitizing functions for #createButton are required");return;}
var button={};button.opts=opts.button_opts;var button_img=document.createElement('img');button_img.style.cursor=button.opts.buttonCursor||Options.buttonCursor;button_img.width=button.opts.buttonWidth||Options.buttonWidth;button_img.height=button.opts.buttonHeight||Options.buttonHeight;button_img.border=button.opts.buttonBorder||Options.buttonBorder;button_img.src=button.opts.img_up_url;button_img.title=button.opts.tooltip;button.img=button_img;GEvent.addDomListener(button.img,"click",function(){if(button.img.getAttribute("src")===button.opts.img_up_url){me.toggleButtons(opts.controlName);opts.startDigitizing();}else{me.toggleButtons(opts.controlName);opts.stopDigitizing();}});me.buttons_[opts.controlName]=button;me.stopDigitizingFuncs_[opts.controlName]=opts.stopDigitizing;return button;};GeometryControls.prototype.toggleButtons=function(button_name){var me=this;for(var button in me.buttons_){me.buttons_[button].img.src=me.buttons_[button].opts.img_up_url;}
if(button_name){me.buttons_[button_name].img.src=me.buttons_[button_name].opts.img_down_url;}
if(button_name){for(var func in me.stopDigitizingFuncs_){if(func!=button_name){me.stopDigitizingFuncs_[func](false);}}}};GeometryControls.prototype.addControl=function(control){var me=this;control.zuper=me;me.controls[control.name]=control;};GeometryControls.prototype.tooltipFactory=function(tooltip_opts){var me=this,map=me.map;var tooltipContainer=document.createElement("div");tooltipContainer.id="tooltipContainer";tooltipContainer.className="emmc-tooltip";map.getContainer().appendChild(tooltipContainer);var calculatePosition=function(latlng,tooltipContainer){var offset=map.getCurrentMapType().getProjection().fromLatLngToPixel(map.getBounds().getSouthWest(),map.getZoom());var point=map.getCurrentMapType().getProjection().fromLatLngToPixel(latlng,map.getZoom());var anchor=new GPoint(tooltip_opts.anchor[0],tooltip_opts.anchor[1]);var width=-12;var position=new GControlPosition(G_ANCHOR_BOTTOM_LEFT,new GSize(point.x-offset.x-anchor.x+width,-point.y+offset.y+anchor.y));position.apply(tooltipContainer);};var customCursorFunc=function(){if(tooltip_opts.cursor_on!==""&&!me.isChrome){var dragObject=me.map.getDragObject();return function(){dragObject.setDraggableCursor(tooltip_opts.cursor_on);};}else{return function(){};}}();var tooltipFunc={me:me,tooltip_opts:tooltip_opts,tooltipHandler:null,tooltipContainer:tooltipContainer,on:function(message,callback){var self_=this;tooltipContainer.innerHTML=message;tooltipContainer.style.display="block";this.tooltipHandler=GEvent.addListener(self_.me.map,"mousemove",function(latlng){calculatePosition(latlng,tooltipContainer);customCursorFunc();if(typeof(callback)==="function"){callback(latlng,tooltipContainer);}});},off:function(){this.me.map.getDragObject().setDraggableCursor(this.tooltip_opts.cursor_off);tooltipContainer.style.display="none";try{GEvent.removeListener(this.tooltipHandler);}catch(e){};}};me.tooltip=function(tooltip_opts){tooltipFunc.tooltip_opts=tooltip_opts;return tooltipFunc;};return tooltipFunc;};GeometryControls.prototype.showColorPicker=function(opts){var me=this,row,cell;var colors=eval(me.infoWindowHtmlTemplates["colorTable"]);var div=document.createElement("div");document.getElementsByTagName("body")[0].appendChild(div);div.innerHTML=me.infoWindowHtmlTemplates["colorTableHtml"];var colorPicker=get$("emmc-menu-color");var colorPickerTable=get$("emmc-color-table");row=colorPickerTable.insertRow(0);for(var i in colors){if(i%7===0&&i!==0){row=colorPickerTable.insertRow(i/7);}
cell=row.insertCell(i%7);cell.innerHTML='<div id="menu_cp_'+colors[i]+'" bgcolor="'+colors[i]+'" style="border: 1px solid rgb(187, 187, 187); margin: 0px;'+'padding: 0px; width: 15px; height: 15px; background-color:'+colors[i]+'" unselectable="on"><img height="1" width="1"/></div>';}
var target,color,callback;var colorPickerHandler=GEvent.addDomListener(colorPicker,"mouseover",function(){var tempHandler=GEvent.addDomListener(me.map.getInfoWindow().getContentContainers()[0],"mouseover",function(){colorPicker.style.display="none";GEvent.removeListener(tempHandler);});var tempHandler2=GEvent.addListener(me.map,"infowindowclose",function(){colorPicker.style.display="none";GEvent.removeListener(tempHandler2);});});var cells=colorPickerTable.getElementsByTagName("div");for(var j=0;j<cells.length;j++){var td=cells[j];GEvent.addDomListener(td,"mouseover",function(){this.style.borderColor="#FFFFFF";});GEvent.addDomListener(td,"mouseout",function(){this.style.borderColor="#BBBBBB";});GEvent.addDomListener(td,"click",function(){color=this.getAttribute("bgColor");target.setAttribute("bgColor",color);target.style.backgroundColor=color;colorPicker.style.display="none";callback(color);});}
var newFunc=function(opts){var position=me.getAbsolutePosition(opts.target);colorPicker.style.left=position.x+1+"px";colorPicker.style.top=position.y+"px";colorPicker.style.display="block";colorPicker.focus();target=opts.target;callback=opts.callback;return colorPicker;};colors=colorPickerTable=row=cells=null;me.showColorPicker=newFunc;return newFunc(opts);};GeometryControls.prototype.addGoogleMapsCSS_=function(){var me=this,css;var appendCSS=function(css){try{document.getElementsByTagName("head")[0].appendChild(css);}catch(e){me.debug("Having trouble adding stylesheets, trying again....");setTimeout(function(){appendCSS(css);},100);}};for(var i=0;i<me.Options.stylesheets.length;i++){css=document.createElement("link");css.setAttribute("href",me.Options.stylesheets[i]);css.setAttribute("rel","stylesheet");css.setAttribute("type","text/css");appendCSS(css);}
css=null;};GeometryControls.prototype.getInfoWindowHtml_=function(){var me=this;var trim=function(stringToTrim){return stringToTrim.replace(/^\s+|\s+$/g,"");};var processHtml=function(doc){var nodes=doc.getElementsByTagName("script");if(nodes.length>=1){for(var i=0;i<nodes.length;i++){var str=nodes[i].getAttribute("id");var content=trim((me.isIE)?nodes[i].childNodes[0].data:nodes[i].textContent);me.infoWindowHtmlTemplates[str]=(nodes[i].getAttribute('evalRequired')==="true")?eval(content):content;}}else{me.debug("GeometryControls#getInfoWindowHtml says: failed to get html from template");}};try{var request=GXmlHttp.create();request.open("GET",me.Options.infoWindowHtmlURL,false);request.send(null);var doc=GXml.parse(request.responseText);processHtml(doc);}catch(e){me.debug("GeometryControls#getInfoWindowHtml says: looks like you provided an invalid URL. The URL is "+me.Options.infoWindowHtmlURL+" The error is: "+e+" "+e.description);}};GeometryControls.prototype.parseMicroTemplate=function(str,data,node){var cache={};this.parseMicroTmpl=function tmpl(str,data,node){var nodeOrStr=(typeof(node)!=="undefined")?node:str;var fn=!/\W/.test(str)?cache[str]=cache[str]||tmpl(nodeOrStr):new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};"+"with(obj){p.push('"+
str.replace(/[\r\t\n]/g," ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');");return data?fn(data):fn;};return this.parseMicroTmpl(str,data,node);};GeometryControls.prototype.bindInfoWindow=function(geomInfo){var me=this,map=me.map,index=geomInfo.index,cssId=me.Options.cssId;var record=geomInfo.storage[index];var geometry=record.geometry;var title=record.title;var description=record.description;var geomStyleLink=get$("msiwsi");var geomStyleDiv=get$(cssId+"-style");var titleInput=get$(cssId+"-title");var descriptionInput=get$(cssId+"-description");var isStyleInfoWindowBound=false;GEvent.addDomListener(geomStyleLink,"click",function(){geomStyleDiv.style.display="block";if(isStyleInfoWindowBound===false){geomInfo.geometryStyleFunc();isStyleInfoWindowBound=true;}});GEvent.addDomListener(get$("emmc-geom-style-back"),"click",function(){geomStyleDiv.style.display="none";});titleInput.value=(title[1])?((title[0]===title[1])?title[0]:title[1]):"";descriptionInput.value=(description[1])?((description[0]===description[1])?description[0]:description[1]):"";GEvent.addDomListener(titleInput,"change",function(){title[1]=titleInput.value;});GEvent.addDomListener(descriptionInput,"change",function(){description[1]=descriptionInput.value;});var windowOnCloseHandler=GEvent.addListener(map,"infowindowbeforeclose",function(){title[1]=titleInput.value;description[1]=descriptionInput.value;GEvent.removeListener(windowOnCloseHandler);});GEvent.addDomListener(get$(cssId+"-delete"),"click",function(){if(confirm("Are you sure you want to delete this?")){map.removeOverlay(geometry);geomInfo.storage[index]=null;if(geomInfo.updateLocationData){geomInfo.updateLocationData();}
map.closeInfoWindow();}});GEvent.addDomListener(get$(cssId+"-cancel"),"click",function(){geomInfo.undoStyling();title[1]=title[0];description[1]=description[0];GEvent.removeListener(windowOnCloseHandler);map.closeInfoWindow();});GEvent.addDomListener(get$(cssId+"-ok"),"click",function(){title[0]=title[1];description[0]=description[1];geomInfo.commitStyling();map.closeInfoWindow();});};GeometryControls.prototype.loadData=function(opts){var me=this;GDownloadUrl(opts.url,function(data,responseCode){(opts.type==="kml")?me.handleKmlDataResponse_(data,responseCode):me.handleJsonDataResponse_(data,responseCode);});};GeometryControls.prototype.handleKmlDataResponse_=function(data,responseCode){var me=this;var EGeoXml={value:function(e){a=GXml.value(e);a=a.replace(/^\s*/,"");a=a.replace(/\s*$/,"");return a;},styles:{}}
function error(e){me.debug("Looks like you provided an invalid URL or parameters or invalid xml. The URL is  ____ ."+"The error is:"+e+" at line "+e.lineNumber+" in file "+e.fileName);}
if(responseCode==200){try{var xmlDoc=GXml.parse(data);var styles=xmlDoc.documentElement.getElementsByTagName("Style");for(var i=0;i<styles.length;i++){var styleID=styles[i].getAttribute("id");var icons=styles[i].getElementsByTagName("Icon");if(icons.length>0){var href=EGeoXml.value(icons[0].getElementsByTagName("href")[0]);if(!!href){var icon={name:styleID};var markerIcons={};for(var j in me.infoWindowHtmlTemplates["markerIcons"]){markerIcons[me.infoWindowHtmlTemplates["markerIcons"][j].name]=me.infoWindowHtmlTemplates["markerIcons"][j];}
switch(true){case(href.indexOf("kml")>-1):icon.y=parseInt(href.charAt(href.indexOf("pal")+3))+1;icon.x=parseInt(href.substring(href.indexOf("icon")+4,href.indexOf(".png")));break;case(href.indexOf("dot")>-1):icon.y=0;if(markerIcons["dot"]){var images=markerIcons["dot"].images;var image=href.split("/").pop();for(var k in images){if(image===images[k]){icon.x=k;}}}else{me.debug("Cannot Load Kml - There is no icon defined for markers with images like *-dot.png");}
break;}}
EGeoXml.styles["#"+icon.name]=icon;}
var linestyles=styles[i].getElementsByTagName("LineStyle");if(linestyles.length>0){var width=parseInt(GXml.value(linestyles[0].getElementsByTagName("width")[0]));if(width<1){width=5;}
var color=EGeoXml.value(linestyles[0].getElementsByTagName("color")[0]);var aa=color.substr(0,2);var bb=color.substr(2,2);var gg=color.substr(4,2);var rr=color.substr(6,2);color="#"+rr+gg+bb;var opacity=parseInt(aa,16)/256;if(!EGeoXml.styles["#"+styleID]){EGeoXml.styles["#"+styleID]={};}
EGeoXml.styles["#"+styleID].color=color;EGeoXml.styles["#"+styleID].width=width;EGeoXml.styles["#"+styleID].opacity=opacity;}
var polystyles=styles[i].getElementsByTagName("PolyStyle");if(polystyles.length>0){var fill=parseInt(GXml.value(polystyles[0].getElementsByTagName("fill")[0]));var outline=parseInt(GXml.value(polystyles[0].getElementsByTagName("outline")[0]));var color=EGeoXml.value(polystyles[0].getElementsByTagName("color")[0]);if(polystyles[0].getElementsByTagName("fill").length===0){fill=1;}
if(polystyles[0].getElementsByTagName("outline").length===0){outline=1;}
var aa=color.substr(0,2);var bb=color.substr(2,2);var gg=color.substr(4,2);var rr=color.substr(6,2);color="#"+rr+gg+bb;var opacity=Math.round((parseInt(aa,16)/256)*100)/100;if(!EGeoXml.styles["#"+styleID]){EGeoXml.styles["#"+styleID]={};}
EGeoXml.styles["#"+styleID].fillcolor=color;EGeoXml.styles["#"+styleID].fillopacity=opacity;if(!fill){EGeoXml.styles["#"+styleID].fillopacity=0;}
if(!outline){EGeoXml.styles["#"+styleID].opacity=0;}}}
var placemarks=xmlDoc.documentElement.getElementsByTagName("Placemark");for(var i=0;i<placemarks.length;i++){var name=EGeoXml.value(placemarks[i].getElementsByTagName("name")[0]);var desc=EGeoXml.value(placemarks[i].getElementsByTagName("description")[0]);if(desc.match(/^http:\/\//i)){desc='<a href="'+desc+'">'+desc+'</a>';}
if(desc.match(/^https:\/\//i)){desc='<a href="'+desc+'">'+desc+'</a>';}
var style=EGeoXml.styles[EGeoXml.value(placemarks[i].getElementsByTagName("styleUrl")[0])]||{};var coords=GXml.value(placemarks[i].getElementsByTagName("coordinates")[0]);coords=coords.replace(/\s+/g," ");coords=coords.replace(/^ /,"");coords=coords.replace(/ $/,"");coords=coords.replace(/, /,",");var path=coords.split(" ");if(path.length>1){var points=[];for(var p=0;p<path.length;p++){var latlng=path[p].split(",");var point=new GLatLng(parseFloat(latlng[1]),parseFloat(latlng[0]));points.push(point);me.bounds.extend(point);}
var linestring=placemarks[i].getElementsByTagName("LineString");if(linestring.length){if(style.width){style.width=5;style.color="#0000ff";style.opacity=0.45;}
me.createGeometry_({type:"line",coordinates:points,title:name,description:desc,style:{strokeColor:style.fillcolor,strokeWeight:3,strokeOpacity:style.fillopacity,opts:{clickable:true}}});}
var polygons=placemarks[i].getElementsByTagName("Polygon");if(polygons.length){if(style.width){style.width=5;style.color="#0000ff";style.opacity=0.45;style.fillopacity=0.25;style.fillcolor="#0055ff";}
me.createGeometry_({type:"poly",coordinates:points,title:name,description:desc,style:{strokeColor:style.fillcolor,strokeWeight:3,strokeOpacity:style.fillopacity,fillColor:style.fillcolor,fillOpacity:style.fillopacity,opts:{clickable:true}}});}}else{var bits=path[0].split(",");var geometry=me.createGeometry_({type:"point",coordinates:[{lat:parseFloat(bits[1]),lng:parseFloat(bits[0])}],title:name,description:desc,style:{icon:style}});me.bounds.extend(geometry.getLatLng());}}
me.zoomToBounds();}catch(e){error(e);}}else{error();}};GeometryControls.prototype.handleJsonDataResponse_=function(data,responseCode){var me=this;if(responseCode==200){var json_data=eval('('+data+')');json_data=json_data[0];if(json_data.status!='success'){me.debug("The JSON was invalid");return;}
switch(json_data.operation){case'get':var geometries=json_data.result.geometries;for(var i=0;i<geometries.records.length;i++){var record=geometries.records[i];if(record.type==='point'){var geometry=me.createGeometry_(record);me.bounds.extend(geometry.getLatLng());}else if(record.type==='line'||record.type=='poly'){var latlng,latlngArray=[];record.coordinates=function(){for(var i in record.coordinates){latlng=new GLatLng(record.coordinates[i].lat,record.coordinates[i].lng);latlngArray[i]=latlng;}return latlngArray;}();var geometry=me.createGeometry_(record);me.bounds.extend(geometry.getBounds().getCenter());}}
me.zoomToBounds();}}else{me.debug("Looks like you provided an invalid URL or parameters. The URL is ___");}};GeometryControls.prototype.zoomToBounds=function(record){var me=this,bounds=me.bounds;if(!bounds.isEmpty()){me.map.setCenter(bounds.getCenter());me.map.setZoom(me.map.getBoundsZoomLevel(bounds));}};GeometryControls.prototype.createGeometry_=function(record){var me=this;try{switch(record.type){case"point":return me.controls["markerControl"].loadMarkers(record);case"line":return me.controls["polylineControl"].loadPolylines(record);case"poly":return me.controls["polygonControl"].loadPolygons(record);}}
catch(e){me.debug("A geometry Control has not been added for the geometry type you are trying to load or there is an error."+"Your error is: "+e+" at line "+e.lineNumber+" in file "+e.fileName);}};GeometryControls.prototype.addAutoSaveAspect=function(){var me=this;me.aop.addBefore(me,'bindInfoWindow',function(args){var geomInfo=args[0];me.autoSaveListener=geomInfo.commitStyling;geomInfo.commitStyling=function(){me.autoSaveListener();};me.aop.addAfter(me,'autoSaveListener',function(){if(me.Options.autoSave){me.saveData({allData:false,geomInfo:geomInfo});}});return args;});};GeometryControls.prototype.saveData=function(opts){var me=this;if(opts.allData===true){}else{var geomInfo=opts.geomInfo,index=opts.geomInfo.index;var record=geomInfo.storage[index];var recordJSON={};recordJSON.type=record.type;recordJSON.coordinates=[];if(record.type==="point"){recordJSON.coordinates.push({lat:record.geometry.getLatLng().lat(),lng:record.geometry.getLatLng().lng()});}else{var vertex;for(var i=0;i<record.geometry.getVertexCount();i++){vertex=record.geometry.getVertex(i);recordJSON.coordinates.push({lat:vertex.lat(),lng:vertex.lng()});}}
recordJSON.title=record.title[0];recordJSON.description=record.description[0];recordJSON.style="";}
function postData(data){me.debug(data);};postData(me.serialize(recordJSON));};GeometryControls.prototype.saveAllData=function(){var me=this;};GeometryControls.prototype.beans={Geometry:function(p){this.type=p.type;this.geometry=p.geometry;this.title=p.title||["",""];this.description=p.description||["",""];},Style:function(p){}};GeometryControls.prototype.setLocalTimeout=function(func,milliseconds){function delayedFunction(){func();}
setTimeout(delayedFunction,milliseconds);};GeometryControls.prototype.getAbsolutePosition=function(el){for(var lx=0,ly=0;el!==null;lx+=el.offsetLeft,ly+=el.offsetTop,el=el.offsetParent){};return{x:lx,y:ly};};GeometryControls.prototype.convertFromMetric=function(distance1,opt_distance2){var distance=opt_distance2+distance1||distance1;return(distance<1609.344)?(distance*3.2808399).toFixed(2)+"ft":(distance*0.0006213711).toFixed(2)+"mi";};GeometryControls.prototype.debug=function(msg){var me=this,tempFunc;if(me.Options.debug){tempFunc=function(msg){GLog.write(msg);};}else{tempFunc=function(){};}
me.debug=tempFunc;return tempFunc(msg);};GeometryControls.prototype.serialize=function(obj){var me=this;var params=[];function traverseObject(myObj){for(var prop in myObj){if(typeof(myObj[prop])==="object"){traverseObject(myObj[prop]);}else{params.push(prop+"="+myObj[prop]);}}};traverseObject(obj);return params.join("&");};GeometryControls.prototype.aop={addBefore:function(obj,filter,before){var link=function(orig){return function(){return orig.apply(this,before(arguments,orig,this));};};this.process_(obj,filter,link);},addAfter:function(obj,filter,after){var link=function(orig){return function(){return after(orig.apply(this,arguments),arguments,orig,this);};};this.process_(obj,filter,link);},addAround:function(obj,filter,around){var link=function(orig){return function(){return around(arguments,orig,this);};};this.process_(obj,filter,link);},process_:function(obj,filter,link){var check;if(filter.exec){check=function(str){return filter.exec(str);};}else if(filter.call){check=function(str){return filter.call(this,str);};}
if(check){for(var member in obj){if(check(member)){this.attach_(obj,member,link);}}}else{this.attach_(obj,filter,link);}},attach_:function(obj,member,link){var orig=obj[member];obj[member]=link(orig);}};
